#!/usr/bin/env python3
'''
  getPids_3 [-mr] [-days] [+days] scheduleID

  Version: Fri Apr 22 14:35:16 BST 2022

  Copyright (C) 2022 Peter Scott - peterscott@pobox.com

  Licence
  -------
     This program is free software: you can redistribute it and / or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>

  Purpose
  -------
     Get a BBC station's schedule, with PIDs and dates, for today and
     optional, extra, past and/or future days.

  Examples:
  ---------
     $ getPids_3       p00fzl7j
     $ getPids_3 -m    p00fzl7j
     $ getPids_3 -r    p00fzl7j
     $ getPids_3 -mr   p00fzl7j
     $ getPids_3 -30   p00fzl7j
     $ getPids_3 +6    p00fzl7j
     $ getPids_3 -6 +6 p00fzl7j

     The schedule ID shown is BBC Radio 4 (FM).
     Get the other schedule IDs from the schedule pages, or
     see: https://www.bbc.co.uk/schedules

  Notes:
  ------
     `getPids' was designed for radio schedules so, by default, it drops
     both repeated PIDs and broadcasts after midnight.  The '-m' option
     includes post-midnight broadcasts and the '-r' option includes
     repeated PIDs.  Use '-h' to see long option names.

     As with the BBC schedules, the output is in latest-last order.

     The original python version worked with Python2 _and_ Python3.
     It was also forgiving if used in a terminal that couldn't handle
     UTF-8 text.

     If your installation doesn't have them, you will need to install
     'requests' and 'HTMLParser'(via pip.)

     I am not a Python programmer.  This is a transcription of an
     earlier shell script that used sed and awk for the screen scraping.
     All offers of improvement would be gladly accepted.
'''

import requests, re, sys, time, datetime, os, string, argparse
from html.parser import HTMLParser

class MyHTMLParser( HTMLParser):
  def __init__( self):
    self.date = ''
    self.time = ''
    self.pid = ''
    self.title = ''
    self.subtitle = ''
    self.repeat = ''
    self.step = 0
    self.expected = ''
    self.hadPid = {}
    HTMLParser.__init__( self)


  def printProgramme( self):

    # don't print if options mean output not wanted
    #
    if dropTomorrows and (self.date != self.expected):
        return
    if dropRepeats and (self.pid in self.hadPid):
        return

    if self.pid == '':     # it happens
        self.pid = '-'
    print( '{0}-{1} {2} "{3}'.format( \
                           self.date, self.time, self.pid, self.title), end='')
    if self.subtitle:
        print( ' -', self.subtitle, end='')
    if self.repeat == '':
        print( '"')
    else:
        print( '"', self.repeat)
    if dropRepeats:
        self.hadPid[self.pid] = True


  def handle_starttag( self, tag, attrs):

    # The h3 tag starts a new programme's entry.
    #
    if tag == 'h3':
        self.date = ''
        self.time = ''
        self.pid = ''
        self.title = ''
        self.subtitle = ''
        self.repeat = ''
        self.step = 1

    # leave early if not in the middle of an h3
    #
    if self.step == 0:
        return

    # for all tags, examine the attributes and values and collect the
    # relevant ones
    #
    for n in range( 0, len( attrs)):
        attr  = attrs[n][0]
        value = attrs[n][1]
        if self.step == 1 and attr == 'content':
            self.date = re.sub( '-', '/', value[0:10])
            self.step = 2
        elif self.step == 2 and value == 'timezone--time':
            self.step = 3   # next data
        elif self.step == 4 and attr == 'data-pid':
            self.pid = value
            self.step = 5
        elif self.step == 5 and value == 'programme__title delta':
            self.step = 6   # next data
        elif self.step == 7 and value == 'programme__subtitle centi':
            self.step = 8   # next data
        elif self.step == 9 and value == 'Repeat':
            self.repeat = '(R)'


  def handle_data( self, data):
    if self.step == 3:
        self.time = data
        self.step = 4
    elif self.step == 6:
        self.title = self.title + data         # can be several lines
    elif self.step == 8:
        self.subtitle = self.subtitle + data   # can be several lines


  def handle_endtag( self, tag):
    if self.step == 6 and tag == 'span':    # end of title
        self.step = 7
    elif tag == 'h4':                       # end of subtitle
        self.step = 9
    elif self.step == 9 and tag == 'p':     # end of programme's entry
        self.printProgramme()
        self.step = 0


  def newPage( self, expected):
    self.expected = expected
    self.step = 0


def errorMessage( message):
  sys.stderr.write( NAME + ': ' + message + '\n')


def usage():
  sys.stderr.write( 'Usage: ' + USAGE + '\n\n' + \
      'Options:\n' + \
      '   -h, --help          show this help and exit\n' + \
      '   -m, --midnights     include post-midnight programmes\n' + \
      '   -r, --repeats       include repeated pids\n')
  exit( 1)


def getArgs():
  global NAME, USAGE, schedule, before, after, dropRepeats, dropTomorrows
  class HelpAction( argparse.Action):
      #
      # argparse won't do optional args like -123 +123
      #
      def __call__( self, parser, namespace, values, option_string=None):
          usage()
          parser.exit()

  NAME = os.path.basename( sys.argv[0])
  USAGE = NAME + ' [-hmr] [-days] [+days] scheduleID'

  parser = argparse.ArgumentParser( usage=USAGE, add_help=False)
  parser.add_argument( '-h', '--help', nargs=0, action=HelpAction)
  parser.add_argument( '-m', '--midnights', action='store_true')
  parser.add_argument( '-r', '--repeats', action='store_true')
  args, argsLeft = parser.parse_known_args()

  if args.repeats:
      dropRepeats = False
  if args.midnights:
      dropTomorrows = False

  # get -days and / or +days if present
  #
  while argsLeft and (re.match( '^[-+][0-9][0-9]*$',argsLeft[0])):
      if re.match( '^-',argsLeft[0]):
          before = int( re.sub( '-', '', argsLeft[0]))
      else:
          after = -1 - int( re.sub( '\+', '', argsLeft[0]))
      argsLeft.pop(0)

  if not argsLeft:
      errorMessage( 'no schedule ID specified\n')
      usage()
  schedule = argsLeft.pop(0)
  if len( schedule) != 8:
      errorMessage( schedule + ": schedule ID isn't eight characters")
      exit( 2)

  if argsLeft:
      reportExtraArgs( argsLeft)


def reportExtraArgs( list):
      extras = list.pop(0)
      if not list:
          ess = '\n'
      else:
          ess = 's\n'
          while list:
              extras = extras + ' ' + list.pop(0)
      errorMessage( extras + ': unexpected extra argument' + ess)
      usage()


NAME = ''        # globals
USAGE = ''
schedule = ''
before = 0
after = -1
dropRepeats = True
dropTomorrows = True

if __name__ == '__main__':

  parser = MyHTMLParser()  # kept between pages to keep track of repeated PIDs

  getArgs()
  today = datetime.date.today()
  for n in range( before, after, -1):
      scheduleDate = today - datetime.timedelta( days = n)
      year = str( scheduleDate.year)
      month = str( scheduleDate.month).zfill( 2)
      day = str( scheduleDate.day).zfill( 2)
      date = year + '/' + month + '/' + day
      url = 'https://www.bbc.co.uk/schedules/' + schedule + '/' + date
      try:
          page = requests.get( url)
          response = page.status_code
      except:
          errorMessage( 'network error')
          exit( 3)
      if response == 200:
          parser.newPage( date)
          parser.feed( page.text)
      else:
          error = "couldn't get: " + url
          if n != after + 1:
              error = error + ' (continuing without it)'
          errorMessage( error)
          if n == after + 1:
              exit( 4)
      if n != after + 1:
          time.sleep( 2)          # niceness
  exit( 0)
