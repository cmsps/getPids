#!/usr/bin/env python
'''
  getPids station [-days] [+days] [ region | hd | fm | lw | mw ]

  Tue May 23 23:09:14 BST 2017

  Copyright (C) 2017 Peter Scott - p.scott@shu.ac.uk

  Licence
  =======
     This program is free software: you can redistribute it and / or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>

  Purpose
  =======
     Get the BBC schedule, with PIDs and dates, for today and optional
     extra past and/or future days.  If PIDs are repeated, only the
     earliest is displayed.  The output is in latest-last order.

  Examples:
  =========
     $ getPids       bbcone wales
     $ getPids       bbcone wales_hd
     $ getPids -30   bbctwo hd
     $ getPids +6    bbctwo england
     $ getPids       radio4 fm
     $ getPids       radio4 lw
     $ getPids       radioscotland mw
     $ getPids       radio3
     $ getPids       1xtra
     $ getPids -6 +6 6music

     See: http://www.bbc.co.uk/radio/stations for more radio stations.

  Notes:
  ======
     getPids runs with Python 2 _and_ Python 3.  You will need to install
     the "six.py" module (via pip) to enable this.  You will also need
     "requests" and "HTMLParser".

     I am not a Python programmer.  This is a transcription of an
     earlier shell script that used sed and awk for the screen scraping.
     All offers of improvement would be gladly accepted.

     The output order differs from that of the original shell script.
     This is partly to avoid reinventing Unix's tac command in Python.
'''

import six, requests, re, sys, datetime, time, os, string
if  six.PY2:
    from HTMLParser import HTMLParser
else:
    from html.parser import HTMLParser

class MyHTMLParser( HTMLParser):
  def __init__( self):
    self.date = ''
    self.time = ''
    self.pid = ''
    self.title = ''
    self.subtitle = ''
    self.repeat = ''
    self.step = 0
    self.expected = ''
    self.hadPid = {}
    HTMLParser.__init__( self)


  def printProgramme( self):

    # Drop tomorrow's programmes and repeated PIDs, print the others.
    #
    if self.date == self.expected and self.pid not in self.hadPid:
        six.print_( '{0}-{1} {2} "{3}'.format( \
                           self.date, self.time, self.pid, self.title), end='')
        if self.subtitle == '':
            six.print_( '"', end='')
        else:
            six.print_( ' - {0}"'.format( self.subtitle), end='')
        if self.repeat == '':
            six.print_( '', end='\n')
        else:
            six.print_( ' ', self.repeat, end='\n')
        self.hadPid [self.pid] = True


  def handle_starttag( self, tag, attrs):

    # The h3 tag starts a new programme.  When we get one, print
    # the previous programme, if any, and prepare for the next.
    #
    if tag == 'h3':
        if self.step != 0:
            self.printProgramme()
        self.date = ''
        self.time = ''
        self.pid = ''
        self.title = ''
        self.subtitle = ''
        self.repeat = ''
        self.step = 1

    # leave early if not had first h3
    #
    if self.step == 0:
        return

    # for all tags, examine the attributes and values and collect the
    # relevant ones
    #
    for n in range( 0, len( attrs)):
        attr  = attrs [n][0]
        value = attrs [n][1]
        if self.step == 1 and attr == 'content':
            self.date = re.sub( '-', '/', value[0:10])
            self.step = 2
        elif self.step == 2 and value == 'timezone--time':
            self.step = 3   # next data
        elif self.step == 4 and attr == 'data-pid':
            self.pid = value
            self.step = 5
        elif self.step == 5 and value == 'programme__title ':
            self.step = 6
        elif self.step == 6 and value == 'name':
            self.step = 7   # next data
        elif self.step == 8 and value == 'programme__subtitle centi':
            self.step = 9
        elif self.step == 9 and value == 'name':
            self.step = 10   # next data
        elif self.step == 11 and value == 'Repeat':
            self.repeat = '(R)'
            self.step = 12   # why not?


  def handle_data( self, data):
    if self.step == 3:
        self.time = data
        self.step = 4
    elif self.step == 7:
        self.title = data
        self.step = 8
    elif self.step == 10:

        # subtitle can be more than one line
        #
        data = data.strip( ' \t\n\r')
        if data[-1:] == ',':
            data = data + ' '
        self.subtitle = self.subtitle + data


  def handle_endtag( self, tag):
    if tag == 'h4':
        self.step = 11            # terminate subtitle
    elif tag == 'html':
        self.printProgramme()     # flush out final programme
        self.step = 0             # prepare for possible next page, why not?


  def newPage( self, expected):
    self.expected = expected
    self.step = 0


def errorMessage( message):
  sys.stderr.write( NAME + ': ' + message + '\n')


def usage():
  sys.stderr.write( 'Usage: ' + NAME + \
        ' [ -days ] [ +days ] station  [ region | hd | fm | lw | mw ]\n')
  exit( 1)


def getArgs():
  global NAME, station, region, before, after

  NAME = os.path.basename( sys.argv [0])
  sys.argv.pop(0)
  if len( sys.argv) == 0:
      usage()

 # deal with -days and or +days
 #
  while re.match('^[-+][0-9][0-9]*$',sys.argv [0]):
      if re.match('^-[0-9][0-9]*$',sys.argv [0]):
          before = int( re.sub( '-', '', sys.argv [0]))
      else:
          after = -1 - int( re.sub( '\+', '', sys.argv [0])) 
      sys.argv.pop(0)
      if len( sys.argv) == 0:
          usage()

  if re.match('^[-+]',sys.argv [0]):
       days = re.sub( '[-+]', '', sys.argv [0], 1)
       errorMessage( '`' + days + "' isn't a number of days")
       exit( 2)
  station = sys.argv [0]
  sys.argv.pop(0)
  if len( sys.argv) == 0:
      return
  region = sys.argv [0]
  sys.argv.pop(0)
  if len( sys.argv) != 0:
      usage()


if __name__ == '__main__':

  parser = MyHTMLParser()  # kept between pages to keep track of repeated PIDs

  NAME = ''        # globals
  station = ''
  region = ''
  before = 0
  after = -1


  getArgs()
  today = datetime.date.today()
  for n in range( before, after, -1):
      scheduleDate = today - datetime.timedelta( days = n)
      year = str( scheduleDate.year)
      month = str( scheduleDate.month).zfill( 2)
      day = str( scheduleDate.day).zfill( 2)
      date = year + '/' + month + '/' + day
      url = 'http://www.bbc.co.uk/' + station + '/programmes/schedules/'
      if region == '':
          url = url + date
      else:
          url = url + region + '/' + date
      try:
          page = requests.get(url)
          response = page.status_code
      except:
          errorMessage( 'network error')
          exit( 3)
      if response == 200:
          parser.newPage( date)
          if  six.PY2:
              parser.feed( page.content)
          else:
              parser.feed( bytes.decode( page.content))
      else:
          error = "couldn't get: " + url
          if n != after + 1:
              error = error + ' (continuing without it)'
          errorMessage( error)
          if n == after + 1:
              exit( 4)
      if n != after + 1:
          time.sleep( 2)          # niceness
  exit( 0)
